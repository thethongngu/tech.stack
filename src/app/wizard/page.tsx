// src/app/wizard/page.tsx
'use client';

import React, { useState } from 'react';
// Import the refactored function and type
import { generateRecommendations, Technology } from '@/lib/recommendationUtils';

export default function WizardPage() {
  const [answers, setAnswers] = useState<string[]>(Array(6).fill(''));
  const [recommendations, setRecommendations] = useState<Technology[]>([]);
  const [copied, setCopied] = useState(false);

  const questions = [
    "What is your project type? (e.g., Web App, Mobile App, API, Data Science)",
    "What is the estimated scale of your project? (e.g., Small, Medium, Large)", // Not used in current scoring
    "What are your preferred programming languages? (e.g., JavaScript, Python, Java)",
    "Do you have any specific framework preferences? (e.g., React, Angular, Django, Spring)",
    "What is your preferred database type? (e.g., SQL, NoSQL, Document, Graph)",
    "Are there any specific technologies you want to include or exclude? (comma-separated, e.g., include React, exclude Angular)"
  ];

  const handleInputChange = (index: number, value: string) => {
    const newAnswers = [...answers];
    newAnswers[index] = value;
    setAnswers(newAnswers);
  };

  // Calculate progress
  const totalQuestions = questions.length;
  const answeredQuestions = answers.filter(answer => answer.trim() !== '').length;
  const progressPercentage = totalQuestions > 0 ? (answeredQuestions / totalQuestions) * 100 : 0;

  // generateRecommendations is now imported

  const handleSubmit = () => {
    const newRecommendations = generateRecommendations(answers);
    setRecommendations(newRecommendations);
    setCopied(false);
  };

  const copyToClipboard = () => {
    if (recommendations.length === 0) {
      alert("No recommendations to copy yet!");
      return;
    }
    const stackText = recommendations.map((tech, index) =>
      `${index + 1}. ${tech.name}
   Description: ${tech.description}
   Category: ${tech.category}
   Tags: ${tech.tags.join(', ')}
   Website: ${tech.website || 'N/A'}`
    ).join('\n\n');
    const fullTextToCopy = `Tech Stack Recommendations:\n\n${stackText}\n\nGenerated by StackWizard`;
    navigator.clipboard.writeText(fullTextToCopy)
      .then(() => {
        setCopied(true);
        setTimeout(() => setCopied(false), 2500);
      })
      .catch(err => {
        console.error('Failed to copy: ', err);
        alert('Failed to copy recommendations to clipboard. You might need to enable clipboard permissions for this site.');
      });
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold text-[rgb(var(--foreground-rgb))] mb-6">
        Stack Configuration Wizard
      </h1>
      <p className="mt-2 mb-8 text-[rgb(var(--muted-rgb))]">
        Answer the following questions to get a personalized stack recommendation.
      </p>

      {/* Progress Bar Section */}
      <div className="mb-10 p-4 border border-[rgb(var(--border-rgb))] rounded-lg shadow-sm">
        <h2 className="text-lg font-medium text-[rgb(var(--foreground-rgb))] mb-2">
          Your Progress: {Math.round(progressPercentage)}%
        </h2>
        <div className="w-full bg-[rgb(var(--progress-bar-bg-rgb))] rounded-full h-3 shadow-inner">
          <div
            className="bg-[rgb(var(--primary-rgb))] h-3 rounded-full transition-all duration-300 ease-out"
            style={{ width: `${progressPercentage}%` }}
          ></div>
        </div>
        <p className="text-sm text-[rgb(var(--muted-rgb))] mt-2">
          {answeredQuestions} of {totalQuestions} questions answered. Keep going!
        </p>
      </div>

      <div className="space-y-8">
        {questions.map((question, index) => (
          <div key={index} className="p-6 border border-[rgb(var(--border-rgb))] rounded-lg shadow-sm">
            <label htmlFor={`question-${index}`} className="block text-lg font-medium text-[rgb(var(--foreground-rgb))] mb-2">
              Question {index + 1}: {question}
            </label>
            <input
              type="text"
              id={`question-${index}`}
              value={answers[index]}
              onChange={(e) => handleInputChange(index, e.target.value)}
              className="w-full p-3 border border-[rgb(var(--input-border-rgb))] rounded-md focus:ring-[rgb(var(--primary-rgb))] focus:border-[rgb(var(--primary-rgb))] bg-[rgb(var(--input-bg-rgb))] text-[rgb(var(--input-text-rgb))]"
              placeholder="Your answer here..."
            />
          </div>
        ))}
      </div>

      <div className="mt-10 flex items-center space-x-4">
        <button
          onClick={handleSubmit}
          className="px-6 py-3 bg-[rgb(var(--primary-rgb))] text-[rgb(var(--primary-foreground-rgb))] rounded-md hover:bg-[rgba(var(--primary-rgb),0.8)] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[rgb(var(--primary-rgb))]"
        >
          Get Recommendations
        </button>
      </div>

      {recommendations.length > 0 ? (
        <div className="mt-10">
          <h2 className="text-xl font-semibold text-[rgb(var(--foreground-rgb))] mb-4">Recommended Technologies:</h2>
          <ul className="space-y-4">
            {recommendations.map(tech => (
              <li key={tech.id} className="p-4 border border-[rgb(var(--border-rgb))] rounded-md bg-[rgb(var(--card-bg-rgb))] shadow-md">
                <h3 className="text-lg font-bold text-[rgb(var(--card-title-rgb))]">{tech.name}</h3>
                <p className="text-sm text-[rgb(var(--muted-rgb))] mt-1">{tech.description}</p>
                <p className="text-xs text-[rgb(var(--muted-rgb))] mt-2"><strong>Category:</strong> {tech.category}</p>
                <p className="text-xs text-[rgb(var(--muted-rgb))] mt-1"><strong>Tags:</strong> {tech.tags.join(', ')}</p>
                {tech.website && (
                  <a
                    href={tech.website}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-xs text-[rgb(var(--primary-rgb))] hover:underline mt-2 inline-block"
                  >
                    Visit website
                  </a>
                )}
              </li>
            ))}
          </ul>
          <div className="mt-8 text-center">
            <button
              onClick={copyToClipboard}
              className={`px-6 py-3 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 transition-all duration-150 ease-in-out
                          ${copied ?
                            'bg-green-600 text-white focus:ring-green-500' :
                            'bg-[rgb(var(--secondary-action-rgb))] text-[rgb(var(--secondary-action-foreground-rgb))] hover:bg-[rgba(var(--secondary-action-rgb),0.8)] focus:ring-[rgb(var(--secondary-action-rgb))]'}`}
            >
              {copied ? 'Copied to Clipboard!' : 'Copy Stack to Clipboard'}
            </button>
          </div>
        </div>
      ) : (
        <p className="mt-10 text-center text-[rgb(var(--muted-rgb))]">
          Your recommended stack will appear here once you submit your answers.
        </p>
      )}
    </div>
  );
}
